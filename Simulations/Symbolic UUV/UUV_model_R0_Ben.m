% Ben Colvin
% 13 February 2020 9:50 AM
% FIRM Project
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Model of UUV from Tutorial - Modeling and Control of UUV. I used the
% Kambara UUV to get parameters for the UUV such as mass, moments of area,
% etc. Takes thrust and outputs relative velocities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Current Issues
% Damping matrix is not filled, not sure of parameters, looking into it.
% Need to get equations similar to the UAV model
% currently only outputs the state space representation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Fault Detection Changes
% Change Dynamic model
% Change Observer equations of motion
% Change mass, inertial parameters in controllers
% Make assumption about thrusters
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% p - pitch rate, phi dot
% q - theta dot
% r - zeta dot
% u
% v
% w
% x
% y
% z
%T1,T2,T3,T4,T5,T6 thrust inputs
% Given Parameters (Kambara)
mass = 175; %[kg]
Ixx = 14;   %[kg m^2]
Iyy = 13;   %[kg m^2]
Izz = 16;   %[kg m^2]
Xdu = 120;  %[Ns/m]
Ydv = 90;   %[Ns/m]
Zdw = 150;  %[Ns/m]
Kdp = 0;
Mdq = 0;
Ndr = 18;   %[Ns/m]
Xuu = 90;   %[Ns^2/m^2]
Yvv = 90;   %[Ns^2/m^2]
Zww = 120;  %[Ns^2/m^2]
Kpp = 0;
Mqq = 0;
Nrr = 15;   %[Ns^2/m^2]
xg = 0;
xb = 0;
yg = 0;
yb = 0;
zg = 0;
zb = 100;
theta = 0;
phi = 0;
Xu = 0;
Yv = 0;
Zw = 0;
Kp = 0;
Mq = 0;
Nr = 0;

% Calculated Parameters/Enviorment
W = mass*9.81;  % [N] - weight
dens = 997; %[kg/m^3] - density
V = 151; %[L] - volume
V = V*0.001;    %Convert to m^3
B = dens*9.81*V;    %Buoyancy
Cd = 0.5;   %drag coeffeceint estimate
Af = 1; %cross Section?

% Assumumptions
    % Relative low speed, lift forces neglected
    % AUV sysmetric about xz, yz, xy plane
        % can decouple dof
    % aligning moment ensures stability
    % roll and pitch movement is neglected
    % B frame is at center of gravity
    % mapping matrix is ignored
    % No enviromental disturbances
    % DOF can be decoupled
        % corolis and centripetal matrices become negligible
mass_rb = [mass 0 0 0 0 0;...
            0 mass 0 0 0 0;...
            0 0 mass 0 0 0;...
            0 0 0 Ixx 0 0;...
            0 0 0 0 Iyy 0;...
            0 0 0 0 0 Izz];
mass_A = [Xdu 0 0 0 0 0;...
            0 Ydv 0 0 0 0;...
            0 0 Zdw 0 0 0;...
            0 0 0 Kdp 0 0;...
            0 0 0 0 Mdq 0;...
            0 0 0 0 0 Ndr];
intertial_matrix = mass_rb + mass_A;

linear_damping = [Xu 0 0 0 0 0;...
                  0 Yv 0 0 0 0;...
                  0 0 Zw 0 0 0;...
                  0 0 0 Kp 0 0;...
                  0 0 0 0 Mq 0;...
                  0 0 0 0 0 Nr]
quad_damping = [0 0 0 0 0 0;...
                0 0 0 0 0 0;...
                0 0 0 0 0 0;...
                0 0 0 0 0 0;...
                0 0 0 0 0 0;...
                0 0 0 0 0 0];
damping = linear_damping + quad_damping
buoy = [(W-B)*sin(theta);...
        -(W-B)*cos(theta)*sin(phi);...
        -(W-B)*cos(theta)*sin(phi);...
        -(yg*W-yb*B)*cos(theta)*cos(phi)+(zg*W-zb*B)*cos(theta)*cos(phi);...
        (zg*W-zb*B)*sin(theta)-(xg*W-xb*B)*cos(theta)*cos(phi);...
        -(xg*W-xb*B)*cos(theta)*sin(phi)-(yg*W-yb*B)*sin(theta)]
   size(intertial_matrix)
   size(damping)
    % State Matrix
    A = [0 0 0 0 0 0 1 0 0 0 0 0;...
         0 0 0 0 0 0 0 1 0 0 0 0;...
         0 0 0 0 0 0 0 0 1 0 0 0;...
         0 0 0 0 0 0 0 0 0 1 0 0;...
         0 0 0 0 0 0 0 0 0 0 1 0;...
         0 0 0 0 0 0 0 0 0 0 0 1;...
         0 0 0 0 0 0 -damping(1,1)/intertial_matrix(1,1) 0 0 0 0 0;...
         0 0 0 0 0 0 0 -damping(2,2)/intertial_matrix(2,2) 0 0 0 0;...
         0 0 0 0 0 0 0 0 -damping(3,3)/intertial_matrix(3,3) 0 0 0;...
         0 0 0 0 0 0 0 0 0 -damping(4,4)/intertial_matrix(4,4) 0 0;...
         0 0 0 0 0 0 0 0 0 0 -damping(5,5)/intertial_matrix(5,5) 0;...
         0 0 0 0 0 0 0 0 0 0 0 -damping(6,6)/intertial_matrix(6,6)];
     
     % Input Matrix
     B = [0 0;...
          0 0;...
          0 0;...
          0 0;...
          0 0;...
          0 0;...
          -buoy(1,1)/intertial_matrix(1,1) T1/intertial_matrix(1,1);...
          -buoy(2,1)/intertial_matrix(2,2) T2/intertial_matrix(2,2);...
          -buoy(3,1)/intertial_matrix(3,3) T3/intertial_matrix(3,3);...
          -buoy(4,1)/intertial_matrix(4,4) T4/intertial_matrix(4,4);...
          -buoy(5,1)/intertial_matrix(5,5) T5/intertial_matrix(5,5);...
          -buoy(6,1)/intertial_matrix(6,6) T6/intertial_matrix(6,6)];
     % Output Matrix
     C = eye(12);
     
     % Direct Transmission Matrix
     D = zeros(12,2);
     
     % State Space Representation of the UUV
     sys = ss(A,B,C,D);
    