% REMUSSIM.M Vehicle Simulator
% M-FILE INPUTS
% + coeffs.mat - generated by COEFFS.M, typically for each run
% + vdata.mat - generated by COEFFS.M, typically for each run

clear; % clear all variables
clc;

disp(sprintf('\n\n REMUS DYNAMICS SIMULATOR'));
disp(sprintf ('Timothy Prestero, MIT/WHOI\n\n'));
load vehicle-type ;
disp(sprintf(' NOTE: Model using %s REMUS dimensions.\n\n', vehicle));

% Check coeffs, initial conditions, and control input vector

choose_setup = input(' Run set-up (y/n):','s') ;

if choose_setup == 'y'
    sim_setup
else
    showall
end

% Output flags
show_step = 1; 
show_speed = 0;
show_pos = 0;
run_savedata = 0;  
run_plots = 0;
choose_int = 0;
%choosesetup = 1;

% SET INTEGRATION METHOD
int_list = {'Basic Euler' 'Improved Euler' 'Fourth-Order Runge-Kutta'};
intmethods = {'euler' 'imp-euler' 'rkutta' }; 
if chooseint
    disp(sprintf(' Integration Method:\n'));
    for i = 1:size(int-list,2) 
        disp(sprintf(' Xi - Xs', i, char(int_list(i))));
    end
    d = input('\n Enter a number: ')
else
d =3
end
int_method = char(int_methods(d));

% check working directory
cd_outputs;

% create .mat files
d = clock;
yy = d(1);
mo = d(2);
dd = d(3); 
hh = d(4);
mm =d(5);
ss = d(6);
date_string = datestr(datenum(yy,mo,dd),i);
time_string = datestr(datenum(yy,mo,dd,hh,mm,ss),13);

%% generate random filename
% [dummy, file-string, dummy, dummy] = fileparts(tempname)
% disp(sprintf('\nCurrent simulator data files:'));
% s *.mat;
% file-string = input(sprintf('\nEnter name for data file: '), 's')
temp_str = datestr(now,O);
file_string =strcat('sim-',temp_str(1:2),temp_str(4:6),temp_str(10:11),'-',...
temp_str(13:14), temp_str(16:17));
disp(sprintf('\nData file saved as\n %s\\%s.mat', cd, file_string));

% EXPERIMENTAL/ASSIGNED VALUES: initial conditions, input vector
% --------------------------------------------------------------
% loading model inputs, generated in SIM_SETUP.M
load input_vector; % data from FININPUTS.M on mission files
load time_step;
load_initialstate ; % data from INITIAL_CONDITIONS.M on above

pitch_max = 90;

% RUN MODEL
%---------------------------------------------------------------------
% Initialize number of steps and storage matrix
if strcmp(int_method,'euler')
    n_steps = size(ui,2);
else
    n_steps = size(ui,2)-1;
end
output_table = zeros(n_steps,size(x,i)+size(ui,i)+7);
disp(sprintf('\n Simulator running...'));

% MAIN PROGRAM
for i = 1:n_steps,
    % Print current step for error checking
    if show_step == 1
        if ~rem(i*10,n_steps)
            disp( sprintf( ' Steps Completed : %02d %% ', i/n_steps*100));
        end
    end
    
    % Store current states x(n), inputs ui(n), and time in seconds
    output_table(i,1:14) = [x' ui(:,i)'];
    output_table(i,21) = (i-1)*time_step;
    
    % Calculate forces, accelerations
    % ** CALLS REMUS.M
    % xdot(i) = f(x(i),u(i))
    [xdot,forces] = remus(x,ui(:,i)');

    % Store forces at step n
    output_table(i,15:20) = [forces'];
    
    if strcmp(int_method,'euler')
        %% EULER INTEGRATION to calculate new states x(n+1)
        %% x(i+i) = x(i) + dx/dt*delta_t
        %%  NOTE: overwriting old states with new states, saving back at the top of the loop
        x = x + (xdot .* time-step) ;
    elseif strcmp(int_method,'impeuler')
        %% IMPROVED EULER INTEGRATION to calculate new states
        ki_vec = x + (xdot .* time_step) ;
        k2_vec = remus(kl_vec, ui(:,(i+1))');
        x = x + 0.5.*time_step.*(xdot + k2_vec);
    elseif strcmp(int-method,'rkutta')
        %% RUNGE-KUTTA APPROXIMATION to calculate new states
        %% NOTE: ideally, should be approximating ui values for k2,k3
        %% ie (ui(:,i)+ui(:,i+1))/2
        k1_vec = xdot;
        k2_vec = remus(x+(0.5.*time_step.*k1_vec), ((ui(:,i)+ui(:,i+1))./2)');
        k3_vec = remus(x+(0.5.*time_step.*k2_vec), ((ui(:,i)+ui(:,i+1))./2)');
        k4_vec = remus(x+(time_step.*k3_vec), ui(:,i+1)');
        x = x + time_step/6.*(k1_vec +2.*k2_vec +2.*k3-vec +k4-vec);
        % ki-vec = xdot ;
        % k2_vec = remus(x+(0.5.*time-step.*k1.vec), ((ui(:,i)+ui(:,i+1))./2)')
        % k3_vec = remus(x+(0.5.*time-step.*k2.vec), ui(:,i)')
        % k4_vec = remus(x+(timestep.*k3_vec), ui(:,i)') ;
        % x = x + time-step/6.*(ki_vec +2.*k2.vec +2.*k3_vec +k4_vec)
        end
end

% SAVE SIMULATOR OUTPUT
%--------------------------------------------------------------------------
% model coefficients and vehicle parameters loaded in REMUS.M
load vdata; 
load vehicle-type; 
load inv-mass-matrix;
load vehiclecoeffs;

save(file_string, 'output_table', 'file_string', 'date_string','time_string',...
'time_step', 'x', 'ui', ...
'W', 'Minv', 'B', 'm', 'g', 'rho', 'xg', 'yg', 'zg', 'xb', 'yb', 'zb',...
'Ixx', 'Iyy', 'Izz', 'delta_max',...
'Xuu', 'Xudot', 'Xwq', 'Xqq', 'Xvr', 'Xrr', 'Xprop',...
'Yvv', 'Yrr', 'Yuv', 'Yvdot', 'Yrdot', 'Yur', 'Ywp', 'Ypq', 'Yuudr',...
'Zww', 'Zqq', 'Zuw', 'Zwdot', 'Zqdot', 'Zuq', 'Zvp', 'Zrp', 'Zuuds',...
'Kpdot', 'Kprop', 'Kpp', ...
'Mww', 'Mqq', 'Muw', 'Mwdot', 'Mqdot', 'Muq', 'Mvp', 'Mrp', 'Muuds',...
'Nvv', 'Nrr', 'Nuv', 'Nvdot', 'Nrdot', 'Nur', 'Nwp', 'Npq', 'Nuudr');

% return to working directory
cd_model;
% save text file of ismulator inputs
if run_savedata
    savedata;
end

% Plot output
figstart = input('\n Starting Figure Number ');
figstart = figstart - 1;
remus_plots;
simplot;

if run-plots
    fmplot
end

disp(sprintf('\n'));
return;
